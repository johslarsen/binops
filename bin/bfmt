#!/usr/bin/env ruby
require 'ffi'

module GLibc
  extend FFI::Library
  ffi_lib('c')
  attach_function(:splice, %i[int pointer int pointer size_t uint], :ssize_t)
end

def splice(input, length = nil, output = $stdout)
  total = 0
  while length.nil? || total < length
    bytes_written = GLibc.splice(input.fileno, FFI::Pointer::NULL, output.fileno, FFI::Pointer::NULL, length.nil? ? -1 : length - total, 0)
    raise SystemCallError, FFI.errno if bytes_written == -1
    break if bytes_written == 0

    total += bytes_written
  end
  total
end

class OFile
  def initialize(io)
    @io = io
    @seekable = !io.stat.pipe?
    @spliceable = true # until proven otherwise
    @offset = 0
  end

  def seek(offset)
    return if offset.nil?

    if @seekable
      @io.seek(offset)
      @offset = offset
    else
      drop = offset - @offset
      raise "Cannot seek backwards in pipe: #{@io}" if drop < 0

      @@devnull ||= File.open(File::NULL, "w")
      copy_to(@@devnull, drop)
    end
  rescue Errno::ESPIPE
    @seekable = false
    retry
  end

  def parse_offset(relative)
    return nil if relative.nil? || relative.empty?

    relative.start_with?("@") ? Integer(relative[1..-1]) : @offset + Integer(relative)
  end

  def parse_length(length)
    return nil if length.nil? || length.empty?

    length = (length.start_with?("@") ? Integer(length[1..-1]) - @offset : Integer(length))
    length < 0 ? 0 : length
  end

  def copy_to(io, length)
    @offset += if @spliceable
                 splice(@io, length, io)
               else
                 IO.copy_stream(@io, io, length)
               end
  rescue Errno::EINVAL
    @spliceable = false
    retry
  end
end

def bfmt(format, args)
  autoidx = 0
  files = [OFile.new($stdin), *args.map { |path| OFile.new(File.open(path, "rb")) }]
  format.split(/(\{[^}]*\})/).each do |token|
    if token =~ /^\{([^}]*)\}$/
      idx, offset, length = Regexp.last_match(1).split(":")
      file = files.fetch(idx.nil? || idx.empty? ? (autoidx += 1) : Integer(idx))
      file.seek(file.parse_offset(offset))
      file.copy_to($stdout, file.parse_length(length))
    else
      $stdout.write(token)
    end
  end
end

if $PROGRAM_NAME == __FILE__
  require 'optparse'

  args = OptionParser.new do |o|
    o.banner += <<EOF
 FORMAT [FILE]... > OUTPUT

Prints FILE(s) according to the FORMAT.

FORMAT is a C++ format string with replacement field that supports a
format-spec like the shell substring expansion:

    {[arg-id][:offset][:length]}

Where arg-id refers to the nth-file argument, 0 for stdin or empty to use the
next argument. The optional offset skips ahead this many bytes in the file or
seeks to the position if prefixed with @. The optional length limits the read
to this many bytes or to the given position if prefixed with @. Parts of the
format string that are not replacement fields are written directly.

EXAMPLES:
    echo -n bar | bfmt "FOO{0}BAZ" => "FOObarBAZ"
    bfmt "{}{}" <(echo -n foo) <(echo -n bar) => "foobar"
    bfmt "{1:0:2} {1:2}" <(echo -n foobar) => "fo ar"
    bfmt "{1:0:2} {1:@3:@5}" <(echo -n foobar) => "fo ba"
EOF
  end.permute!
  raise "Missing FORMAT argument" if args.empty?

  Signal.trap("SIGPIPE", "SYSTEM_DEFAULT")
  $stdout.sync = true
  raise "Stdout cannot be a TTY" if $stdout.tty?

  bfmt(args[0], args[1..-1])
end
